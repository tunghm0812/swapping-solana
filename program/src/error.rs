//! Error types

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the Swapping program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum Errors {
    /// Invalid instruction data passed in.
    #[error("Failed to unpack instruction data")]
    InstructionUnpackError,
    /// Lamport balance below rent-exempt threshold.
    #[error("Lamport balance below rent-exempt threshold")]
    NotRentExempt,
    /// The account cannot be initialized because it is already in use.
    #[error("Account is already initialized")]
    AlreadyInitialized,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner,
    ///
    #[error("Insufficient funds for transaction")]
    InsufficientFundsForTransaction,
    /// 
    #[error("Invalid authority pubkey")]
    InvalidAuthorityPubkey,
    /// Token initialize account failed
    #[error("Token initialize account failed")]
    TokenInitializeAccountFailed,
    ///
    #[error("Invalid rate input")]
    InvalidRate,
    /// Invalid amount, must be greater than zero
    #[error("Input amount is invalid")]
    InvalidAmount,
    /// Expected a different SPL Token program
    #[error("Input token program account is not valid")]
    InvalidTokenProgram,
    /// Invalid account input
    #[error("Invalid account input")]
    InvalidAccountInput,
    /// Amount out too less
    #[error("Amount out too less")]
    AmountOutTooLess,
    /// Amount out too less
    #[error("Amount out too less")]
    AmountOutNotEnough,
    /// Token transfer failed
    #[error("Token transfer failed")]
    TokenTransferFailed,
}

impl From<Errors> for ProgramError {
    fn from(e: Errors) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl<T> DecodeError<T> for Errors {
    fn type_of() -> &'static str {
        "Program Error"
    }
}
